{
  "openapi": "3.0.0",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.letsexchange.io/api"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/coins": {
      "get": {
        "description": "This returns the list of coins available for exchange with the selected coin at a given time or sends the entire list of coins. \nThe response also contains parameters such as the “extra ID”, if applicable for a specific cryptocurrency, for example, the Destination Tag for XRP (XRP). \n\nIn addition, the response provides icon links.\n",
        "responses": {
          "200": {
            "description": "Coins response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CoinResponse"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Wrong API key in Bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrongAPITokenError"
                },
                "example": {
                  "error": "Wrong number of segments"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Internal error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/coins": {
      "get": {
        "description": "This returns the list of coins available for exchange with a selected coin at a given time or the entire list of coins. Each coin entry contains an array of networks. \n\nThe response also contains parameters such as the “extra ID”, if applicable for a specific cryptocurrency, for example, the Destination Tag for XRP (XRP). \n\nIn addition, the response provides icon links.\n",
        "responses": {
          "200": {
            "description": "Coins response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CoinResponseV2"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Wrong API key in Bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrongAPITokenError"
                },
                "example": {
                  "error": "Wrong number of segments"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Internal error"
                }
              }
            }
          }
        }
      }
    },

    "/v1/info": {
      "post": {
        "description": "It returns the current rate, calculates the final amount that the user will receive, and sets the minimum and maximum amounts for deposits.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoinInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Coin Info response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoinInfoResponse"
                }
              }
            }
          },
          "403": {
            "description": "Wrong API key in Bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrongAPITokenError"
                },
                "example": {
                  "error": "Wrong number of segments"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Rate is not available for this pair."
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": {
                    "validation": {
                      "withdrawal_amount": "Min amoun: 0.002"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Internal error"
                }
              }
            }
          }
        }
      }
    },

    "/v1/info-revert": {
      "post": {
        "description": "You can use this API to get the exact amount of specific coins. \n\nFor example, when a customer needs to pay the bill with 5 XMR (“coin to”), and he needs to know how much BTC (“coin from”) he should send. The request gives the current rate and calculates the amount of coins a user should send to receive the desired amount of a “target” cryptocurrency. It also sets the minimum and the maximum amounts for the deposit.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoinInfoRevertRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Coin Info Revert response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoinInfoRevertResponse"
                }
              }
            }
          },
          "403": {
            "description": "Wrong API key in Bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrongAPITokenError"
                },
                "example": {
                  "error": "Wrong number of segments"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Rate is not available for this pair."
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": {
                    "validation": {
                      "withdrawal_amount": "Min amoun: 0.002"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Internal error"
                }
              }
            }
          }
        }
      }
    },

    "/v1/info/bulk": {
      "post": {
        "description": "",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoinInfoBulkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Coin Info Bulk response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CoinInfoRevertResponse"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Wrong API key in Bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrongAPITokenError"
                },
                "example": {
                  "error": "Wrong number of segments"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": {
                    "validation": {
                      "coins": "The coins field is required."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Internal error"
                }
              }
            }
          }
        }
      }
    },

    "/v1/transaction": {
      "post": {
        "description": "This call allows you to request creation of an exchange. You choose the coin pair you’d like to exchange, provide the sender’s withdrawal address, and specify the amount of coins you want to swap. Letsexchange.io returns the address and extra ID (if needed) for a deposit, final amount, fee, and other parameters.\n\n**To receive an affiliate fee from a transaction, the API query must include the following parameter: `affiliate_id`.**",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Create Transaction response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTransactionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Wrong API key in Bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrongAPITokenError"
                },
                "example": {
                  "error": "Wrong number of segments"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Rate is not available for this pair."
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": {
                    "validation": {
                      "withdrawal_extra_id": "The withdrawal extra id field must be present."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Internal error"
                }
              }
            }
          }
        }
      }
    },

    "/v1/transaction-revert": {
      "post": {
        "description": "It is the same as Create Transaction but without `deposit_amount` and required `withdrawal_amount`.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionRevertRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Create Transaction Revert response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTransactionRevertResponse"
                }
              }
            }
          },
          "403": {
            "description": "Wrong API key in Bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrongAPITokenError"
                },
                "example": {
                  "error": "Wrong number of segments"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Rate is not available for this pair."
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": {
                    "validation": {
                      "withdrawal_extra_id": "The withdrawal extra id field must be present."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Internal error"
                }
              }
            }
          }
        }
      }
    },

    "/v1/transaction/check-promo-code":  {
      "post": {
        "description": "Check Transaction Promo Code",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionCheckPromoCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Check Transaction Promo Code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionCheckPromoCodeResponse"
                }
              }
            }
          },
          "403": {
            "description": "Wrong API key in Bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrongAPITokenError"
                },
                "example": {
                  "error": "Wrong number of segments"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Rate is not available for this pair."
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": {
                    "validation": {
                      "withdrawal_extra_id": "The withdrawal extra id field must be present."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Internal error"
                }
              }
            }
          }
        }
      }
    },

    "/v1/transaction/{id}": {
      "get": {
        "description": "It gives detailed information about a single transaction. One of the returned parameters is `rate` which is the current rate offered by LetsExchange. It may differ from the market rate and change rapidly depending on the market situation.",
        "parameters": [{
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string",
            "description": "Unique identifier for transaction assigned by letsexchange.io",
            "example": "599cd4bb4d4a5"
          },
          "required": true
        }],
        "responses": {
          "200": {
            "description": "Coins response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Wrong API key in Bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrongAPITokenError"
                },
                "example": {
                  "error": "Wrong number of segments"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Transaction not found"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Internal error"
                }
              }
            }
          }
        }
      }
    },

    "/v1/transactions-list": {
      "get": {
        "description": "It returns detailed information about transactions.",
        "parameters": [{
          "in": "query",
          "name": "ids[]",
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Transactions IDs array assigned by LetsExchange. \n\n Use it right way -  \n\n`?ids[]=be0c5f84ccc&ids[]=f8c6v4..`",
            "example": "599cd4bb4d4a5"
          },
          "required": true
        }],
        "responses": {
          "200": {
            "description": "Coins response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetTransactionResponse"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Wrong API key in Bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrongAPITokenError"
                },
                "example": {
                  "error": "Wrong number of segments"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Internal error"
                }
              }
            }
          }
        }
      }
    },

    "/v1/transaction/{id}/status": {
      "get": {
        "description": "Allows the current status of the transaction to be checked as a string.",
        "parameters": [{
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string",
            "description": "Unique identifier for transaction assigned by letsexchange.io",
            "example": "599cd4bb4d4a5"
          },
          "required": true
        }],
        "responses": {
          "200": {
            "description": "Get Transaction Status response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionStatusResponse"
                }
              }
            }
          },
          "403": {
            "description": "Wrong API key in Bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrongAPITokenError"
                },
                "example": {
                  "error": "Wrong number of segments"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Transaction not found"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Internal error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CoinResponse": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Coin short name (code)",
            "example": "ETH-BEP20",
            "type": "string"
          },
          "name": {
            "description": "Currency full name",
            "example": "Ethereum",
            "type": "string"
          },
          "network_code": {
            "description": "Coin network code",
            "example": "BEP20",
            "type": "string"
          },
          "network_name": {
            "description": "Coin network name",
            "example": "Binance Smart Chain (BEP20)",
            "type": "string"
          },
          "default_network_code": {
            "description": "Coin default network code",
            "example": "ETH",
            "type": "string"
          },
          "default_network_name": {
            "description": "Coin default network name",
            "example": "Ethereum",
            "type": "string"
          },
          "disabled": {
            "description": "The availability of the coins. `0` - available, `1` - unavailable **[DEPRECATED]**",
            "example": 1,
            "type": "number"
          },
          "is_active": {
            "description": "The availability of the coins. `1` - available, `0` - unavailable",
            "example": 1,
            "type": "number"
          },
          "icon": {
            "description": "The link to the coin logo",
            "example": "https://letsexchange.s3.eu-central-1.amazonaws.com/coins/23d9818d338b43e692dddf6455c0d197.svg",
            "type": "string"
          },
          "has_extra": {
            "description": "`1` f the coin has an extra ID in addition to the address, `0` if it doesn’t",
            "example": 1,
            "type": "number"
          },
          "extra_name": {
            "description": "Name of the extra ID",
            "example": "MEMO",
            "nullable": true,
            "type": "string"
          },
          "additional_info_get": {
            "description": "Additional info for a coin to get",
            "example": "Due to network requirements, the exchange will be processed after 500 confirmations of your deposit transaction.",
            "type": "string"
          },
          "additional_info_send": {
            "description": "Additional info for a coin to send",
            "example": "Please note that token has migrated to the new Binance Chain contact address",
            "type": "string"
          },
          "explorer": {
            "description": "Cryptocurrency blockchain explorer URL is used to check transaction status in a block explorer",
            "example": "https://pacific-explorer.manta.network/",
            "type": "string"
          },
          "contract_address": {
            "description": "Contract address",
            "example": "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
            "type": "string"
          }
        }
      },
      "CoinResponseV2": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Coin short name (code)",
            "example": "ETH",
            "type": "string"
          },
          "name": {
            "description": "Currency full name",
            "example": "Ethereum",
            "type": "string"
          },
          "disabled": {
            "description": "The availability of the coins. `0` - available, `1` - unavailable **[DEPRECATED]**",
            "example": 1,
            "type": "number"
          },
          "is_active": {
            "description": "The availability of the coins. `1` - available, `0` - unavailable",
            "example": 1,
            "type": "number"
          },
          "icon": {
            "description": "The link to the coin logo",
            "example": "https://letsexchange.s3.eu-central-1.amazonaws.com/coins/23d9818d338b43e692dddf6455c0d197.svg",
            "type": "string"
          },
          "additional_info_get": {
            "description": "Additional info for a coin to get",
            "example": "Due to network requirements, the exchange will be processed after 500 confirmations of your deposit transaction.",
            "type": "string"
          },
          "additional_info_send": {
            "description": "Additional info for a coin to send",
            "example": "Please note that token has migrated to the new Binance Chain contact address",
            "type": "string"
          },
          "default_network_code": {
            "description": "Coin default network code",
            "example": "ETH",
            "type": "string"
          },
          "default_network_name": {
            "description": "Coin default network name",
            "example": "Ethereum",
            "type": "string"
          },
          "networks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Coin network name",
                  "example": "Binance Smart Chain (BEP20)",
                  "type": "string"
                },
                "code": {
                  "description": "Coin network code",
                  "example": "BEP20",
                  "type": "string"
                },
                "is_active": {
                  "description": "The availability of the networks. `1` - available, `0` - unavailable",
                  "example": 1,
                  "type": "number"
                },
                "has_extra": {
                  "description": "`1` f the coin has an extra ID in addition to the address, `0` if it doesn’t",
                  "example": 1,
                  "type": "number"
                },
                "extra_name": {
                  "description": "Name of the extra ID",
                  "example": "MEMO",
                  "nullable": true,
                  "type": "string"
                },
                "explorer": {
                  "description": "Cryptocurrency blockchain explorer URL is used to check transaction status in a block explorer",
                  "example": "https://pacific-explorer.manta.network/",
                  "type": "string"
                },
                "contract_address": {
                  "description": "Contract address",
                  "example": "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
                  "type": "string"
                },
                "validation_address_regex": {
                  "description": "Validation address regex",
                  "example": "^(0x)[0-9A-Fa-f]{40}$",
                  "type": "string"
                },
                "validation_address_extra_regex": {
                  "description": "Validation address `extra` regex",
                  "example": "^[0-9A-Za-z-_]{1,120}$",
                  "nullable": true,
                  "type": "string"
                }
              }
            }
          }
        }
      },

      "CoinInfoRequest": {
        "required": [
          "from",
          "to",
          "network_from",
          "network_to",
          "amount",
          "affiliate_id"
        ],
        "type": "object",
        "properties": {
          "from": {
            "description": "Coin code from",
            "example": "BTC",
            "type": "string"
          },
          "to": {
            "description": "Coin code to",
            "example": "USDT",
            "type": "string"
          },
          "network_from": {
            "description": "Code for a cryptocurrency network of a coin a user will send",
            "example": "BTC",
            "type": "string"
          },
          "network_to": {
            "description": "Code for a cryptocurrency network of a coin to get",
            "example": "TRC20",
            "type": "string"
          },
          "amount": {
            "description": "Amount of currency `from`",
            "example": 0.01,
            "type": "number"
          },
          "promocode": {
            "description": "Is a transaction with a promo code",
            "example": "promocodeExample",
            "type": "string"
          },
          "affiliate_id": {
            "description": "Affiliate ID",
            "example": "q1W2e3R4tEXAMPLE",
            "type": "string"
          },
          "float": {
            "description": "Is float. Default value - true",
            "example": true,
            "type": "boolean"
          }
        }
      },
      "CoinInfoResponse": {
        "type": "object",
        "properties": {
          "min_amount": {
            "description": "The minimum possible amount to be sent",
            "example": "0.002",
            "type": "string"
          },
          "max_amount": {
            "description": "The maximum possible amount to be sent",
            "example": "1500",
            "type": "string"
          },
          "amount": {
            "description": "The final amount a user will receive after the exchange",
            "example": "6004.36459183",
            "type": "string"
          },
          "fee": {
            "description": "Service fee (in destination currency) **[DEPRECATED]**",
            "example": "0",
            "type": "string"
          },
          "rate": {
            "description": "The current exchange rate offered by LetsExchange",
            "example": "60102.709354577579216",
            "type": "string"
          },
          "profit": {
            "description": "If a promo code was used, a bonus value in BTC",
            "example": "13",
            "nullable": true,
            "type": "string"
          },
          "withdrawal_fee": {
            "description": "The withdrawal fee is specified in the currency a user gets",
            "example": "5.90634362",
            "type": "string"
          },
          "rate_id": {
            "description": "Rate identifier for a FIXED rate flow",
            "example": "646006ec-c1c7-482e-acb6-682e7674fd7e",
            "nullable": true,
            "type": "string"
          },
          "rate_id_expired_at": {
            "description": "The timestamp (in milliseconds) when the received rate will expire",
            "example": "1719396641906",
            "nullable": true,
            "type": "string"
          }
        }
      },

      "CoinInfoRevertRequest": {
        "required": [
          "from",
          "to",
          "network_from",
          "network_to",
          "amount",
          "affiliate_id"
        ],
        "type": "object",
        "properties": {
          "from": {
            "description": "Coin code from",
            "example": "USDT",
            "type": "string"
          },
          "to": {
            "description": "Coin code to",
            "example": "ETH",
            "type": "string"
          },
          "network_from": {
            "description": "Code for a cryptocurrency network of a coin a user will send",
            "example": "TRC20",
            "type": "string"
          },
          "network_to": {
            "description": "Code for a cryptocurrency network of a coin to get",
            "example": "ETH",
            "type": "string"
          },
          "amount": {
            "description": "An amount of a coin to get",
            "example": "0.5",
            "type": "number"
          },
          "promocode": {
            "description": "Is a transaction with a promo code",
            "example": "promocodeExample",
            "type": "string"
          },
          "affiliate_id": {
            "description": "Affiliate ID",
            "example": "q1W2e3R4tEXAMPLE",
            "type": "string"
          }
        }
      },
      "CoinInfoRevertResponse": {
        "type": "object",
        "properties": {
          "min_amount": {
            "description": "The minimum possible amount to be sent",
            "example": "0.002",
            "type": "string"
          },
          "max_amount": {
            "description": "The maximum possible amount to be sent",
            "example": "27000",
            "type": "string"
          },
          "amount": {
            "description": "The amount a user must send to receive the amount from the `amount` request",
            "example": "1725.45941279",
            "type": "string"
          },
          "fee": {
            "description": "Service fee (in destination currency) **[DEPRECATED]**",
            "example": "0",
            "type": "string"
          },
          "rate": {
            "description": "The current exchange rate offered by LetsExchange",
            "example": "0.000290844400000",
            "type": "string"
          },
          "profit": {
            "description": "If a promo code was used, a bonus value in BTC",
            "example": "13",
            "nullable": true,
            "type": "string"
          },
          "withdrawal_fee": {
            "description": "The withdrawal fee is specified in the currency a user gets.",
            "example": "5.90634362",
            "type": "string"
          },
          "rate_id": {
            "description": "Rate identifier for a FIXED rate flow",
            "example": "646006ec-c1c7-482e-acb6-682e7674fd7e",
            "nullable": true,
            "type": "string"
          },
          "rate_id_expired_at": {
            "description": "The timestamp (in milliseconds) when the received rate will expire",
            "example": "1719396641906",
            "nullable": true,
            "type": "string"
          }
        }
      },

      "CoinInfoBulkRequest": {
        "required": [
          "float",
          "affiliate_id",
          "coins"
        ],
        "type": "object",
        "properties": {
          "float": {
            "description": "Is float rate",
            "example": true,
            "type": "boolean"
          },
          "affiliate_id": {
            "description": "Affiliate ID",
            "example": "q1W2e3R4tEXAMPLE",
            "type": "string"
          },
          "coins": {
            "description": "You will get coins rates with pairs from intersections between that list. **The limit is 50 coins per query.**",
            "example": ["BTC", "USDT", "ETH"],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CoinInfoBulkResponse": {
        "type": "object",
        "properties": {
          "from": {
            "description": "Coin code from",
            "example": "USDT",
            "type": "string"
          },
          "to": {
            "description": "Coin code from",
            "example": "BTC",
            "type": "string"
          },
          "network_from": {
            "description": "Code for a cryptocurrency network of a coin a user will send",
            "example": "ARBITRUM",
            "type": "string"
          },
          "network_to": {
            "description": "Code for a cryptocurrency network of a coin to get",
            "example": "BTC",
            "type": "string"
          },
          "rate": {
            "description": "The current exchange rate offered by LetsExchange",
            "example": "60102.709354577579216",
            "type": "string"
          },
          "min_amount": {
            "description": "The minimum possible amount to be sent",
            "example": "0.002",
            "type": "string"
          },
          "max_amount": {
            "description": "The maximum possible amount to be sent",
            "example": "1500",
            "type": "string"
          },
          "network_fee": {
            "description": "Withdrawal fee specified in the `to` currency",
            "example": "0.90634362",
            "type": "string"
          },
          "rate_id": {
            "description": "Rate identifier for a FIXED rate flow",
            "example": "646006ec-c1c7-482e-acb6-682e7674fd7e",
            "type": "string"
          },
          "rate_id_expired_at": {
            "description": "The timestamp (in milliseconds) when the received rate will expire",
            "example": "1719396641906",
            "type": "string"
          }
        }
      },

      "CreateTransactionRequest": {
        "required": [
          "float",
          "coin_from",
          "coin_to",
          "network_from",
          "network_to",
          "deposit_amount",
          "withdrawal",
          "withdrawal_extra_id",
          "affiliate_id"
        ],
        "type": "object",
        "properties": {
          "float": {
            "description": "Is float. Default value - true",
            "example": true,
            "type": "boolean"
          },
          "coin_from": {
            "description": "Coin code from",
            "example": "BTC",
            "type": "string"
          },
          "coin_to": {
            "description": "Coin code to",
            "example": "USDT",
            "type": "string"
          },
          "network_from": {
            "description": "Code for a cryptocurrency network of a coin a user will send",
            "example": "BTC",
            "type": "string"
          },
          "network_to": {
            "description": "Code for a cryptocurrency network of a coin to get",
            "example": "TRC20",
            "type": "string"
          },
          "deposit_amount": {
            "description": "The amount of coins to be exchanged is specified by a user",
            "example": 0.01,
            "type": "number"
          },
          "withdrawal": {
            "description": "The destination address. LetsExchange will send the exchanged coins to this address",
            "example": "TR7NHqjeKQxGTCi8q8ZY4txxxSzgjLj6t",
            "type": "string"
          },
          "withdrawal_extra_id": {
            "description": "Additional ID for destination wallet addresses for currencies that use extra ID for transaction processing. The field should be empty if an extra ID is not provided for a given cryptocurrency. **A request without this field is not allowed.**",
            "example": "",
            "type": "string"
          },
          "return": {
            "description": "A user's address he sent coins from or another one that may be used as a refund address if it is necessary",
            "example": "bc1qxygdygjrs2kzq2n0qtyrf2111pxxxxxxxwl0h",
            "nullable": true,
            "type": "string"
          },
          "return_extra_id": {
            "description": "An extra ID for a user's address he sent coins from or another one that may be used as a refund address if it is necessary",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "rate_id": {
            "description": "Rate identifier for a FIXED `{float: false}` rate flow",
            "example": "n4142vs2-5a55-11a3-344a-0b17163",
            "type": "string"
          },
          "promocode": {
            "description": "Is a transaction with a promo code",
            "example": "promocodeExample",
            "nullable": true,
            "type": "string"
          },
          "affiliate_id": {
            "description": "Affiliate ID",
            "example": "q1W2e3R4tEXAMPLE",
            "type": "string"
          },
          "partner_user_ip": {
            "description": "End user IP address",
            "example": "127.0.0.1",
            "type": "string"
          }
        }
      },
      "CreateTransactionResponse": {
        "type": "object",
        "properties": {
          "transaction_id": {
            "description": "Unique identifier for transaction assigned by letsexchange.io",
            "example": "5bb44a4d99cd5",
            "type": "string"
          },
          "status": {
            "description": "Transaction status is used to notify a user about the progress of the exchange process. See [transaction statuses for a detailed description](/documentation/statuses)",
            "example": "wait",
            "type": "string"
          },
          "coin_from": {
            "description": "Coin to exchange `from`",
            "example": "BTC",
            "type": "string"
          },
          "coin_from_name": {
            "description": "Coin to exchange `from` name",
            "example": "Bitcoin",
            "type": "string"
          },
          "coin_from_network": {
            "description": "Coin to exchange `from` network",
            "example": "BTC",
            "type": "string"
          },
          "coin_to": {
            "description": "Coin to exchange `to`",
            "example": "USDT",
            "type": "string"
          },
          "coin_to_name": {
            "description": "Coin to exchange `to` name",
            "example": "TetherUS",
            "type": "string"
          },
          "coin_to_network": {
            "description": "Coin to exchange `to` network",
            "example": "TRC20",
            "type": "string"
          },
          "deposit_amount": {
            "description": "The amount of coins to be exchanged is specified by a user",
            "example": "0.01",
            "type": "string"
          },
          "withdrawal_amount": {
            "description": "This is the expected amount that a user will receive when an exchange is completed",
            "example": "595.94740104",
            "type": "string"
          },
          "deposit": {
            "description": "The deposit address to which a user must send the coins",
            "example": "bc1efvrjjxxxx9nzzzcuzhqdxxxwe0wxx",
            "type": "string"
          },
          "deposit_extra_id": {
            "description": "Additional ID for deposit addresses for cryptocurrencies that use extra ID for transaction processing. **Important: sending coins without using extra ID (when it is provided) may result in loss of funds!**",
            "example": null,
            "nullable": true,
            "type": "string"
          },
          "withdrawal": {
            "description": "The destination address. LetsExchange will send the exchanged coins to this address",
            "example": "TR7NHqjeKQxGTCi8q8ZY4txxxSzgjLj6t",
            "type": "string"
          },
          "withdrawal_extra_id": {
            "description": "Additional ID for destination wallet addresses for currencies that use extra ID for transaction processing. The field should be empty if an extra ID is not provided for a given cryptocurrency. **A request without this field is not allowed.**",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "rate": {
            "description": "The current exchange rate offered by LetsExchange",
            "example": "60186.054837423674181",
            "type": "string"
          },
          "fee": {
            "description": "Service fee (in destination currency) **[DEPRECATED]**",
            "example": "0",
            "type": "string"
          },
          "return": {
            "description": "A user's address he sent coins from or another one that may be used as a refund address if it is necessary",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "return_hash": {
            "description": "Hash for transaction refund",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "return_amount": {
            "description": "Amount of transaction refund",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "return_extra_id": {
            "description": "Additional ID for refund wallet addresses of currencies that use extra ID for transaction processing",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "is_float": {
            "description": "Transaction FIXED or FLOAT",
            "example": "true",
            "type": "boolean"
          },
          "coin_from_explorer_url": {
            "description": "An explorer URL for a cryptocurrency to send",
            "example": "https://blockchair.com/bitcoin/transaction/",
            "type": "string"
          },
          "coin_to_explorer_url": {
            "description": "An explorer URL for a cryptocurrency to get",
            "example": "https://tronscan.org/#/transaction/",
            "type": "string"
          },
          "need_confirmations": {
            "description": "Minimum number of confirmations to start the exchanging",
            "example": 4,
            "type": "number"
          },
          "aml_error_signals": {
            "description": "List of AML signals when the status is [aml_check_failed](/documentation/statuses#aml-check-failed)",
            "example": [{
              "signal":"mixingService",
              "signalId":24,
              "signalPercent":95.6,
              "level":4}
            ],
            "type": "array"
          }
        }
      },

      "CreateTransactionRevertRequest": {
        "required": [
          "float",
          "coin_from",
          "coin_to",
          "network_from",
          "network_to",
          "withdrawal_amount",
          "withdrawal",
          "withdrawal_extra_id",
          "rate_id",
          "affiliate_id"
        ],
        "type": "object",
        "properties": {
          "float": {
            "description": "Is float. Default value - true",
            "example": true,
            "type": "boolean"
          },
          "coin_from": {
            "description": "Coin code from",
            "example": "BTC",
            "type": "string"
          },
          "coin_to": {
            "description": "Coin code to",
            "example": "USDT",
            "type": "string"
          },
          "network_from": {
            "description": "Code for a cryptocurrency network of a coin a user will send",
            "example": "BTC",
            "type": "string"
          },
          "network_to": {
            "description": "Code for a cryptocurrency network of a coin to get",
            "example": "TRC20",
            "type": "string"
          },
          "withdrawal_amount": {
            "description": "Amount to be received in `coin_to` value",
            "example": 200,
            "type": "number"
          },
          "withdrawal": {
            "description": "The destination address. LetsExchange will send the exchanged coins to this address",
            "example": "TR7NHqjeKQxGTCi8q8ZY4txxxSzgjLj6t",
            "type": "string"
          },
          "withdrawal_extra_id": {
            "description": "Additional ID for destination wallet addresses of currencies that use extra ID for transaction processing. **Must be presented as at least an empty string**",
            "example": "",
            "type": "string"
          },
          "return": {
            "description": "A user's address he sent coins from or another one that may be used as a refund address if it is necessary",
            "example": "bc1qxygdygjrs2kzq2n0qtyrf2111pxxxxxxxwl0h",
            "nullable": true,
            "type": "string"
          },
          "return_extra_id": {
            "description": "The address user sends coins from, or another one that may be used as a refund address, if it is necessary",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "rate_id": {
            "description": "Rate identifier for a FIXED rate flow",
            "example": "n4142vs2-5a55-11a3-344a-0b17163",
            "type": "string"
          },
          "affiliate_id": {
            "description": "Affiliate ID",
            "example": "q1W2e3R4tEXAMPLE",
            "type": "string"
          },
          "partner_user_ip": {
            "description": "End user IP address",
            "example": "127.0.0.1",
            "type": "string"
          }
        }
      },
      "CreateTransactionRevertResponse": {
        "type": "object",
        "properties": {
          "transaction_id": {
            "description": "Unique identifier for transaction assigned by letsexchange.io",
            "example": "599cd4bb4d4a5",
            "type": "string"
          },
          "status": {
            "description": "Transaction status is used to notify a user about the progress of the exchange process. See [transaction statuses for a detailed description](/documentation/statuses)",
            "example": "wait",
            "type": "string"
          },
          "coin_from": {
            "description": "Coin to exchange `from`",
            "example": "BTC",
            "type": "string"
          },
          "coin_from_name": {
            "description": "Coin to exchange `from` name",
            "example": "Bitcoin",
            "type": "string"
          },
          "coin_from_network": {
            "description": "Coin to exchange `from` network",
            "example": "BTC",
            "type": "string"
          },
          "coin_to": {
            "description": "Coin to exchange `to`",
            "example": "USDT",
            "type": "string"
          },
          "coin_to_name": {
            "description": "Coin to exchange `to` name",
            "example": "TetherUS",
            "type": "string"
          },
          "coin_to_network": {
            "description": "Coin to exchange `to` network",
            "example": "TRC20",
            "type": "string"
          },
          "deposit_amount": {
            "description": "The amount of coins to be exchanged is specified by a user",
            "example": "0.01",
            "type": "string"
          },
          "withdrawal_amount": {
            "description": "This is the expected amount that a user will receive when an exchange is completed",
            "example": "595.94740104",
            "type": "string"
          },
          "deposit": {
            "description": "The deposit address to which a user must send the coins",
            "example": "bc1efvrjjxxxx9nzzzcuzhqdxxxwe0wxx",
            "type": "string"
          },
          "deposit_extra_id": {
            "description": "Additional ID for deposit addresses for cryptocurrencies that use extra ID for transaction processing. **Important: sending coins without using extra ID (when it is provided) may result in loss of funds!**",
            "example": null,
            "nullable": true,
            "type": "string"
          },
          "withdrawal": {
            "description": "The destination address. LetsExchange will send the exchanged coins to this address",
            "example": "TR7NHqjeKQxGTCi8q8ZY4txxxSzgjLj6t",
            "type": "string"
          },
          "withdrawal_extra_id": {
            "description": "Additional ID for destination wallet addresses for currencies that use extra ID for transaction processing. The field should be empty if an extra ID is not provided for a given cryptocurrency. **A request without this field is not allowed.**",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "rate": {
            "description": "The current exchange rate offered by LetsExchange",
            "example": "60186.054837423674181",
            "type": "string"
          },
          "fee": {
            "description": "Service fee (in destination currency) **[DEPRECATED]**",
            "example": "0",
            "type": "string"
          },
          "return": {
            "description": "A user's address he sent coins from or another one that may be used as a refund address if it is necessary",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "return_hash": {
            "description": "Hash for transaction refund",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "return_amount": {
            "description": "Amount of transaction refund",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "return_extra_id": {
            "description": "Additional ID for refund wallet addresses of currencies that use extra ID for transaction processing",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "is_float": {
            "description": "Transaction FIXED or FLOAT",
            "example": "true",
            "type": "boolean"
          },
          "coin_from_explorer_url": {
            "description": "An explorer URL for a cryptocurrency to send",
            "example": "https://blockchair.com/bitcoin/transaction/",
            "type": "string"
          },
          "coin_to_explorer_url": {
            "description": "An explorer URL for a cryptocurrency to get",
            "example": "https://tronscan.org/#/transaction/",
            "type": "string"
          },
          "need_confirmations": {
            "description": "Minimum number of confirmations to start the exchanging",
            "example": 4,
            "type": "number"
          },
          "aml_error_signals": {
            "description": "List of AML signals when the status is [aml_check_failed](/documentation/statuses#aml-check-failed)",
            "example": [{
              "signal":"mixingService",
              "signalId":24,
              "signalPercent":95.6,
              "level":4}
            ],
            "type": "array"
          }
        }
      },

      "TransactionCheckPromoCodeRequest": {
        "required": [
          "promocode"
        ],
        "type": "object",
        "properties": {
          "promocode": {
            "description": "Promo code",
            "example": "q1W2e3R4tEXAMPLE",
            "type": "string"
          }
        }
      },
      "TransactionCheckPromoCodeResponse": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Verification status",
            "example": true,
            "type": "boolean"
          }
        }
      },

      "GetTransactionResponse": {
        "type": "object",
        "properties": {
          "transaction_id": {
            "description": "Unique identifier for transaction assigned by letsexchange.io",
            "example": "5bb44a4d99cd5",
            "type": "string"
          },
          "status": {
            "description": "Transaction status is used to notify a user about the progress of the exchange process. See [transaction statuses for a detailed description](/documentation/statuses)",
            "example": "wait",
            "type": "string"
          },
          "coin_from": {
            "description": "Coin to exchange `from`",
            "example": "BTC",
            "type": "string"
          },
          "coin_from_name": {
            "description": "Coin to exchange `from` name",
            "example": "Bitcoin",
            "type": "string"
          },
          "coin_from_network": {
            "description": "Coin to exchange `from` network",
            "example": "BTC",
            "type": "string"
          },
          "coin_to": {
            "description": "Coin to exchange `to`",
            "example": "USDT",
            "type": "string"
          },
          "coin_to_name": {
            "description": "Coin to exchange `to` name",
            "example": "TetherUS",
            "type": "string"
          },
          "coin_to_network": {
            "description": "Coin to exchange `to` network",
            "example": "TRC20",
            "type": "string"
          },
          "deposit_amount": {
            "description": "The amount of coins to be exchanged is specified by a user",
            "example": "0.01",
            "type": "string"
          },
          "withdrawal_amount": {
            "description": "This is the expected amount that a user will receive when an exchange is completed",
            "example": "595.94740104",
            "type": "string"
          },
          "real_deposit_amount": {
            "description": "Displays received deposit amount. It may differ from the amount specified by user",
            "example": "500",
            "type": "string"
          },
          "real_withdrawal_amount": {
            "description": "If the received deposit differs from the initial amount, the final amount is recalculated using the same rate",
            "example": "0.0098743",
            "type": "string"
          },
          "deposit": {
            "description": "The deposit address to which a user must send the coins",
            "example": "bc1efvrjjxxxx9nzzzcuzhqdxxxwe0wxx",
            "type": "string"
          },
          "deposit_extra_id": {
            "description": "Additional ID for deposit addresses for cryptocurrencies that use extra ID for transaction processing. **Important: sending coins without using extra ID (when it is provided) may result in loss of funds!**",
            "example": null,
            "nullable": true,
            "type": "string"
          },
          "withdrawal": {
            "description": "The destination address. LetsExchange will send the exchanged coins to this address",
            "example": "TR7NHqjeKQxGTCi8q8ZY4txxxSzgjLj6t",
            "type": "string"
          },
          "withdrawal_extra_id": {
            "description": "Additional ID for destination wallet addresses for currencies that use extra ID for transaction processing. The field should be empty if an extra ID is not provided for a given cryptocurrency. **A request without this field is not allowed.**",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "rate": {
            "description": "The current exchange rate offered by LetsExchange",
            "example": "60186.054837423674181",
            "type": "string"
          },
          "fee": {
            "description": "Service fee (in destination currency) **[DEPRECATED]**",
            "example": "0",
            "type": "string"
          },
          "hash_in": {
            "description": "Incoming transaction hash",
            "example": "d04cb31fcaa58ca8f8bba45120dba9119c70e8c5e1301209",
            "type": "string"
          },
          "hash_out": {
            "description": "Outcoming transaction hash",
            "example": "s120dba9119c70e8c5e130120904cb31fcaa58ca8f8bba45",
            "type": "string"
          },
          "return": {
            "description": "A user's address he sent coins from or another one that may be used as a refund address if it is necessary",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "return_hash": {
            "description": "Hash for transaction refund",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "return_amount": {
            "description": "Amount of transaction refund",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "return_extra_id": {
            "description": "Additional ID for refund wallet addresses of currencies that use extra ID for transaction processing",
            "example": "",
            "nullable": true,
            "type": "string"
          },
          "is_float": {
            "description": "Transaction FIXED or FLOAT",
            "example": "true",
            "type": "boolean"
          },
          "coin_from_explorer_url": {
            "description": "An explorer URL for a cryptocurrency to send",
            "example": "https://blockchair.com/bitcoin/transaction/",
            "type": "string"
          },
          "coin_to_explorer_url": {
            "description": "An explorer URL for a cryptocurrency to get",
            "example": "https://tronscan.org/#/transaction/",
            "type": "string"
          },
          "need_confirmations": {
            "description": "Minimum number of confirmations to start the exchanging",
            "example": 4,
            "type": "number"
          },
          "confirmations": {
            "description": "Current number of confirmations",
            "example": 20,
            "type": "number"
          },
          "execution_time": {
            "description": "It is the time spent on the exchange in seconds. The time is measured from the moment funds are received until the output transaction is sent to the recipient’s wallet",
            "example": 200,
            "type": "number"
          },
          "profit": {
            "description": "If a promo code was used, a bonus value in BTC",
            "example": 0.01343595,
            "nullable": true,
            "type": "number"
          },
          "aml_error_signals": {
            "description": "List of AML signals when the status is [aml_check_failed](/documentation/statuses#aml-check-failed)",
            "example": [{
              "signal":"mixingService",
              "signalId":24,
              "signalPercent":95.6,
              "level":4}
            ],
            "type": "array"
          }
        }
      },

      "GetTransactionStatusResponse": {
        "type": "string",
        "description": "Transaction status is used to notify user about progress of the exchange process. [See *transaction statuses for detailed description](/documentation/statuses)",
        "example": "success"
      },

      "Error": {
        "required": [
          "success",
          "error"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "WrongAPITokenError": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}