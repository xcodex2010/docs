{
  "openapi": "3.0.0",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.letsexchange.io"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/coins": {
      "get": {
        "description": "This returns the list of coins, available for exchange with selected coin at given time, or gets entire list of coins.\nResponse also contains such parameters as extra id name, if it exists. For example, destination tag for Ripple, message for XEM or payment id for Monero. In addition, it provides icon links.",
        "responses": {
          "200": {
            "description": "Coins response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CoinResponse"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Wrong API key in Bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrongAPITokenError"
                },
                "example": {
                  "error": "Wrong number of segments"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Internal error"
                }
              }
            }
          }
        }
      }
    },

    "/v1/info": {
      "post": {
        "description": "Gets current rate, calculates final amount that user will get, and also it sets minimum and maximum amounts for deposit.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoinInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Coin Info response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoinInfoResponse"
                }
              }
            }
          },
          "403": {
            "description": "Wrong API key in Bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrongAPITokenError"
                },
                "example": {
                  "error": "Wrong number of segments"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Rate is not available for this pair."
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": {
                    "validation": {
                      "withdrawal_amount": "Min amoun: 0.002"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Internal error"
                }
              }
            }
          }
        }
      }
    },

    "/v1/info-revert": {
      "post": {
        "description": "This method is used when you want to get the exact amount of specific coins.\nFor example, when a customer needs to pay the bill with 5 XMR (coin ‘to’), and he needs to know how much BTC (coin ‘from’) he should send.\nThe request gets current rate, calculates the amount of coins that user should send to receive the desired amount of ‘target’ currency, and also it sets the minimum and the maximum amounts for the deposit.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoinInfoRevertRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Coin Info Revert response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoinInfoRevertResponse"
                }
              }
            }
          },
          "403": {
            "description": "Wrong API key in Bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrongAPITokenError"
                },
                "example": {
                  "error": "Wrong number of segments"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Rate is not available for this pair."
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": {
                    "validation": {
                      "withdrawal_amount": "Min amoun: 0.002"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "error": "Internal error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CoinResponse": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Coin short name (code)",
            "example": "ETH-BEP20",
            "type": "string"
          },
          "name": {
            "description": "Currency full name",
            "example": "Ethereum",
            "type": "string"
          },
          "network_code": {
            "description": "Coin network code",
            "example": "BEP20",
            "type": "string"
          },
          "network_name": {
            "description": "Coin network name",
            "example": "Binance Smart Chain (BEP20)",
            "type": "string"
          },
          "default_network_code": {
            "description": "Coin default network code",
            "example": "ETH",
            "type": "string"
          },
          "default_network_name": {
            "description": "Coin default network name",
            "example": "Ethereum",
            "type": "string"
          },
          "disabled": {
            "description": "The availability of the coins. `0` - available, `1` - unavailable **[DEPRECATED]**",
            "example": 1,
            "type": "number"
          },
          "is_active": {
            "description": "The availability of the coins. `1` - available, `0` - unavailable",
            "example": 1,
            "type": "number"
          },
          "icon": {
            "description": "The link to the coin logo",
            "example": "https://letsexchange.s3.eu-central-1.amazonaws.com/coins/23d9818d338b43e692dddf6455c0d197.svg",
            "type": "string"
          },
          "has_extra": {
            "description": "`1` if coin may have an extra ID in addition to the address,`0` if it doesn’t",
            "example": 1,
            "type": "number"
          },
          "extra_name": {
            "description": "Name of the extra ID",
            "example": "MEMO",
            "nullable": true,
            "type": "string"
          },
          "additional_info_get": {
            "description": "Additional info for get coin",
            "example": "Due to network requirements, the exchange will be processed after 500 confirmations of your deposit transaction.",
            "type": "string"
          },
          "additional_info_send": {
            "description": "Additional info for send coin",
            "example": "Please note that token has migrated to the new Binance Chain contact address",
            "type": "string"
          },
          "explorer": {
            "description": "Currency blockchain explorer URL. It is used for checking transaction status in block explorer",
            "example": "https://pacific-explorer.manta.network/",
            "type": "string"
          }
        }
      },

      "CoinInfoRequest": {
        "required": [
          "from",
          "to",
          "network_from",
          "network_to",
          "amount",
          "affiliate_id"
        ],
        "type": "object",
        "properties": {
          "from": {
            "description": "Coin code from",
            "example": "BTC",
            "type": "string"
          },
          "to": {
            "description": "Coin code to",
            "example": "USDT",
            "type": "string"
          },
          "network_from": {
            "description": "Code for `from` network currency",
            "example": "BTC",
            "type": "string"
          },
          "network_to": {
            "description": "Code for `to` network currency",
            "example": "TRC20",
            "type": "string"
          },
          "amount": {
            "description": "Amount of currency `from`",
            "example": 0.01,
            "type": "number"
          },
          "promocode": {
            "description": "Is transaction with promocode",
            "example": "promocodeExample",
            "type": "string"
          },
          "affiliate_id": {
            "description": "Affiliate ID",
            "example": "q1W2e3R4tEXAMPLE",
            "type": "string"
          },
          "float": {
            "description": "Is float. Default value - true",
            "example": true,
            "type": "boolean"
          }
        }
      },

      "CoinInfoResponse": {
        "type": "object",
        "properties": {
          "min_amount": {
            "description": "Minimum possible amount to be sent",
            "example": "0.002",
            "type": "string"
          },
          "max_amount": {
            "description": "Maximum possible amount to be sent; usually we do not have upper limits",
            "example": "1500",
            "type": "string"
          },
          "amount": {
            "description": "The final amount that user will receive after the exchange",
            "example": "6004.36459183",
            "type": "string"
          },
          "fee": {
            "description": "Service fee (in destination currency)",
            "example": "0",
            "type": "string"
          },
          "rate": {
            "description": "Current exchange rate offered by letsexchange.io",
            "example": "60102.709354577579216",
            "type": "string"
          },
          "profit": {
            "description": "Promocode bonus value",
            "example": "13",
            "nullable": true,
            "type": "string"
          },
          "withdrawal_fee": {
            "description": "Withdrawal fee specified in the `to` currency",
            "example": "5.90634362",
            "type": "string"
          },
          "rate_id": {
            "description": "Rate identifier for a FIXED rate flow",
            "example": "646006ec-c1c7-482e-acb6-682e7674fd7e",
            "nullable": true,
            "type": "string"
          },
          "rate_id_expired_at": {
            "description": "Rate ID expired at value on milliseconds",
            "example": "1719396641906",
            "nullable": true,
            "type": "string"
          }
        }
      },

      "CoinInfoRevertRequest": {
        "required": [
          "from",
          "to",
          "network_from",
          "network_to",
          "amount",
          "affiliate_id"
        ],
        "type": "object",
        "properties": {
          "from": {
            "description": "Coin code from",
            "example": "USDT",
            "type": "string"
          },
          "to": {
            "description": "Coin code to",
            "example": "ETH",
            "type": "string"
          },
          "network_from": {
            "description": "Code for `from` network currency",
            "example": "TRC20",
            "type": "string"
          },
          "network_to": {
            "description": "Code for `to` network currency",
            "example": "ETH",
            "type": "string"
          },
          "amount": {
            "description": "Amount of currency `to`",
            "example": "0.5",
            "type": "number"
          },
          "promocode": {
            "description": "Is transaction with promocode",
            "example": "promocodeExample",
            "type": "string"
          },
          "affiliate_id": {
            "description": "Affiliate ID",
            "example": "q1W2e3R4tEXAMPLE",
            "type": "string"
          }
        }
      },

      "CoinInfoRevertResponse": {
        "type": "object",
        "properties": {
          "min_amount": {
            "description": "Minimum possible amount to be sent",
            "example": "0.002",
            "type": "string"
          },
          "max_amount": {
            "description": "Maximum possible amount to be sent; usually we do not have upper limits",
            "example": "27000",
            "type": "string"
          },
          "amount": {
            "description": "The `from` amount the user must send to receive the amount from the request `amount`",
            "example": "1725.45941279",
            "type": "string"
          },
          "fee": {
            "description": "Service fee (in destination currency)",
            "example": "0",
            "type": "string"
          },
          "rate": {
            "description": "Current exchange rate offered by letsexchange.io",
            "example": "0.000290844400000",
            "type": "string"
          },
          "profit": {
            "description": "Promocode bonus value",
            "example": "13",
            "nullable": true,
            "type": "string"
          },
          "withdrawal_fee": {
            "description": "Withdrawal fee specified in the `to` currency",
            "example": "5.90634362",
            "type": "string"
          },
          "rate_id": {
            "description": "Rate identifier for a FIXED rate flow",
            "example": "646006ec-c1c7-482e-acb6-682e7674fd7e",
            "nullable": true,
            "type": "string"
          },
          "rate_id_expired_at": {
            "description": "Rate ID expired at value on milliseconds",
            "example": "1719396641906",
            "nullable": true,
            "type": "string"
          }
        }
      },

      "Error": {
        "required": [
          "success",
          "error"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "WrongAPITokenError": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}